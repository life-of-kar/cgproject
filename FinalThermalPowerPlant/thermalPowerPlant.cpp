#include<stdlib.h>
#include<string.h>
#include<stdio.h>
#include<gl/glut.h>
#include<math.h>

//var for setting fades
float alphaVal = 0.0;

int flag3D = 0;

//Variables that says the current size of screen
int wid, hei;

void chckWin()
{	
	wid = glutGet(GLUT_WINDOW_WIDTH);
	hei = glutGet(GLUT_WINDOW_HEIGHT) ;
	
	//printf("width : %d, height : %d", wid, hei);

}

void display1();
void electroCity();
void sceneElectricity();
void title();
void plantLayout();

void *currentfont;

void declare(char *string){
     while(*string)
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, *string++);
}

void setFont(void *font)
{
	currentfont=font;
}

void DrawEllipse(float cx, float cy, float rx, float ry, int num_segments) 
{ 
    float theta = 2 * 3.1415926 / float(num_segments); 
    float c = cosf(theta);//precalculate the sine and cosine
    float s = sinf(theta);
    float t;

    float x = 1;//we start at angle = 0 
    float y = 0; 

	glPointSize(100.0);
    glBegin(GL_POLYGON); 
    for(int ii = 0; ii < num_segments; ii++) 
    { 
        //apply radius and offset
        glVertex2f(x * rx + cx, y * ry + cy);//output vertex 

        //apply the rotation matrix
        t = x;
        x = c * x - s * y;
        y = s * t + c * y;
    } 
    glEnd(); 
}



void drawstring(float x,float y,float z,char *string)
{
	char *c;
	glRasterPos3f(x,y,z);
 
	for(c=string;*c!='\0';c++)
	{	glColor3f(0.0,1.0,1.0);
		glutBitmapCharacter(currentfont,*c);
	}
}

void delay(int x)
{
	int i,j;
	for(i=0;i<x;i++)
	{
		for(j=0;j<i*1000;j++)
		;
	}
}

void drawBitmapText(char *string,float x,float y,float z) 
{  
	char *c;
	glRasterPos2f(x, y);

	for (c=string; *c != '\0'; c++) 
	{
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *c);
		//glutStrokeCharacter(GLUT_STROKE_MONO_ROMAN, *c);
	}
}

void drawBitmapTextCenter(char *string, float x,float y,float z, int center) {
	char *c;
	char *b;
	int amount=0;
	for(b=string;b!='\0';b++)
		amount = strlen(string); 
	if(center == 1)
		glRasterPos3f(x-amount/2, y,z);
	else
		glRasterPos3f(x, y,z);
	for (c=string; *c != '\0'; c++) {
		glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, *c);
	}
}



void displayMenus(void)
{
	glClearColor(0.0,0.0,0.0,1.0);
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

	//chckWin();
	glColor3f(1, 0.5, 0);
	//Menu for 500X500 window Size
	if(wid <= 500 && hei <= 500)
	{
		while(alphaVal < 1){
			glColor4f(1, 0.5, 0, alphaVal);
			drawBitmapText("MENU", 200, 400, 0);
			drawBitmapText("Use the keys to navigate", 125, 350, 0);
			alphaVal+=0.03;
			delay(200);
			glFlush();
		}
		alphaVal = 0.0;

		glColor3ub(175, 180, 178);

		drawBitmapText("1. About Electricity", 50, 300, 0);
		delay(200);
		glFlush();
		drawBitmapText("2. Plant Layout", 50, 250, 0);
		delay(200);
		glFlush();
		drawBitmapText("3. Working Model", 50, 200, 0);
		delay(200);
		glFlush();
		drawBitmapText("4. Current Usage", 50, 150, 0);
		delay(200);
		glFlush();

	}
	else if(wid > 500 && hei > 500)
	{
		while(alphaVal < 1){
			glColor4f(1, 0.5, 0, alphaVal);
			drawBitmapText("MENU", 200, 400, 0);
			drawBitmapText("Use the keys to navigate", 170, 350, 0);
			alphaVal+=0.03;
			delay(200);
			glFlush();
		}
		alphaVal = 0.0;

		glColor3ub(175, 180, 178);
		drawBitmapText("1. About Electricity", 50, 300, 0);
		delay(200);
		glFlush();
		drawBitmapText("2. Plant Layout", 50, 250, 0);
		delay(200);
		glFlush();
		drawBitmapText("3. Working Model", 50, 200, 0);
		delay(200);
		glFlush();
		drawBitmapText("4. Current Usage", 50, 150, 0);
		delay(200);
		glFlush();
	}

	delay(1500);

	//glutPostRedisplay();
	//chckWin();
}
void display_operations(void)
{
	glClearColor(1.0,1.0,1.0,1.0);
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

	glBegin(GL_POLYGON);
		glColor3ub(151, 153, 159);
		glVertex2f(0, hei);
		glVertex2f(wid, hei);
		glColor3ub(209, 235, 235);
		glVertex2f(wid, 0);
		glVertex2f(0, 0);
	glEnd();

	
	if(wid <= 500 && hei <= 500)
	{
		glColor3ub(4, 19, 54);
		drawBitmapText("WORKING OF THERMAL POWER PLANTS", 15, 440, 0);

		drawBitmapText("->Thermal Power plant is a power generating",
			20, 350, 0);
		drawBitmapText(" unit in which heat energy is converted to",
			20, 325, 0);
		drawBitmapText(" electrical energy. ",
			20, 300, 0);

		drawBitmapText("->Turbo Generator made to rotate from heat",
			20, 270, 0);
		drawBitmapText("generated by steam generated from burning coal.",
			20, 245, 0);
		
		drawBitmapText("->By generating heat from burning coal ,",
			20, 215, 0);
		drawBitmapText("the heat is passed to the running water in pipes.",
			20, 190, 0);

		drawBitmapText("->Heat Energy generated is transfered to ", 
			20, 160, 0);
		drawBitmapText(" ordinary water and carried away as steam.",
			20, 135, 0);

		drawBitmapText("->Steam feeds the Turbo Generator thus ",
			20, 105, 0);
		drawBitmapText(" making it to rotate and power is generated.",
			20, 80, 0);

			
		glFlush();
	}
	//Window other than 500X500
	else if(wid > 500 && hei > 500)
	{

		glColor3ub(4, 19, 54);
		drawBitmapText("WORKING OF THERMAL POWER PLANTS", 150, 350, 0);

		drawBitmapText("->Thermal Power-plant is a power generating unit in which heat energy is converted to electrical energy. ",
			60, 230, 0);

		drawBitmapText("->Turbo Generator made to rotate from heat generated by steam generated from burning coal",
			60, 200, 0);
		
		drawBitmapText("->By generating heat from burning coal ,the heat is passed to the running water in pipes.",
			60, 170, 0);

		drawBitmapText("->Heat Energy generated is transfered to ordinary water and carried away as steam.",
			60, 140, 0);

		drawBitmapText("->Steam feeds the Turbo Generator thus making it to rotate and power is generated.",
			60, 110, 0);

			
		glFlush();
	}	
		delay(2000);
		glutPostRedisplay();

}

void title()
{
	glClearColor(1.0,1.0,1.0,1.0);
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

	//chckWin();
	if(wid <= 500 && hei <= 500)
	{
		glColor3f(0.0, 0.0, 0.0);
		 glRectf(30, 30, 470, 455);

		 glColor3f(1, 1, 0);
		 drawBitmapText("THERMAL POWER PLANT", 105, 370, 0);
		 		 
		 glColor3f(1, 1, 1);
		 drawBitmapText("CLICK to START", 165, 320, 0);
		 
		 drawBitmapText("Click 'm' for Main Menu", 35, 200, 0);
		 drawBitmapText("Click 'd' for Description", 35, 180, 0);
		 drawBitmapText("Click 'n' for Navigation", 35, 160, 0);
		 drawBitmapText("Click 'e' for End", 35, 140, 0);
		 
		 //Us :)
		 glColor3f(1, 1, 1);
		 glRasterPos2f(100, 100);
		 declare("By,"); 

		 glColor3f(1, 1, 1);
		 glRasterPos2f(100, 80);
		 declare("Nandeesha 1DS15CS414"); 

		  glColor3f(1, 1, 1);
		 glRasterPos2f(100, 60);
		 declare("Hemanth Kumar N 1DS15CS409 ");

		  glColor3f(1, 1, 1);
		 glRasterPos2f(100, 40);
		 declare("Karthik R 1DS15CS411");
		 
		 glFlush();
	}
	else if(wid > 500 && hei > 500)
	{
		 //char tmp_str[40];
		 glColor3f(0.0, 0.0, 0.0);
		 glRectf(30, 30, 470, 455);

		 glColor3f(1, 1, 0);
		 drawBitmapText("THERMAL POWER PLANT", 195, 310, 0);
		 		 
		 glColor3f(1, 1, 1);
		 drawBitmapText("CLICK to START", 215, 270, 0);
		 
		 drawBitmapText("CLICK 'm' FOR MAIN MENU", 35, 100, 0);
		 drawBitmapText("CLICK 'd' FOR DESCRIPTION", 35, 80, 0);
		 drawBitmapText("CLICK 'n' FOR NAVIGATION", 35, 60, 0);
		 drawBitmapText("CLICK 'e' FOR END", 35, 40, 0);


		 //Us :)
		 glColor3f(1, 1, 1);
		 glRasterPos2f(350, 85);
		 declare("By "); 

		 glColor3f(1, 1, 1);
		 glRasterPos2f(350, 70);
		 declare("Nandeesha 1DS15CS414"); 

		  glColor3f(1, 1, 1);
		 glRasterPos2f(350, 55);
		 declare("Hemanth Kumar N 1DS15CS409 ");

		  glColor3f(1, 1, 1);
		 glRasterPos2f(350, 40);
		 declare("Karthik R 1DS15CS411");

		 glFlush();
	}

	glutPostRedisplay();
}

void mouse(int btn, int state, int x, int y){

     if(btn == GLUT_LEFT_BUTTON && state == GLUT_DOWN ){
		 electroCity();     
	 }
	 printf("%d, %d\n", x, y);

}

void keys(unsigned char key,int x,int y)
{

	if(key=='n' || key == 'N')displayMenus();
	if(key=='m' || key == 'M')title();
	if(key=='e' || key == 'E')exit (1);
	if(key=='d' || key == 'D')display_operations();
	
	if(key == '1') sceneElectricity();
	if(key == '2')	plantLayout();
	if(key == '3') display1();
	if(key == '4') electroCity();
}


void myReshape(int w,int h)
{
	glViewport(0,0,w,h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	if(w<=h)
		glFrustum(-2.0,2.0,-2.0*(GLfloat)h/
(GLfloat)w,2.0*(GLfloat)h/(GLfloat)w,-10.0,10.0);
	else
		glFrustum(-2.0,2.0,-2.0*(GLfloat)w/
(GLfloat)h,2.0*(GLfloat)w/(GLfloat)h,-10.0,10.0);
	glMatrixMode(GL_MODELVIEW);
}
void myinit()
{
	
	glColor3f(0.0,0.0,1.0);
	gluOrtho2D(0.0,500.0,0.0,500.0);
	
}

void coal()
{
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_POLYGON);
		glVertex2i(38, 130);
		glVertex2i(62, 153);
		glVertex2i(60, 147);
		glVertex2i(90, 160);
		glVertex2i(87, 145);
		glVertex2i(128, 152);
		glVertex2i(126, 147);
		glVertex2i(140, 150);
		glVertex2i(137, 147);
		glVertex2i(157, 155);
		glVertex2i(152, 140);
		glVertex2i(175, 148);
		glVertex2i(215, 130);
	glEnd();
}

void createfire()
{
	glColor3ub(231, 057, 000);
	glBegin(GL_POLYGON);
		glVertex2i(35, 130);
		glVertex2i(45, 170);
		glVertex2i(50, 157);
		glVertex2i(52, 180);
		glVertex2i(59, 195);
		glVertex2i(66, 182);
		glVertex2i(74, 202);
		glVertex2i(79, 218);
		glVertex2i(88, 210);
		glVertex2i(99, 225);
		glVertex2i(120, 250);
		glVertex2i(135, 230);
		glVertex2i(142, 207);
		glVertex2i(150, 215);
		glVertex2i(165, 190);
		glVertex2i(175, 208);
		glVertex2i(185, 180);
		glVertex2i(200, 163);
		glVertex2i(209, 173);
		glVertex2i(218, 130);
	glEnd();
}

void createFire2()
{
	glColor3ub(231, 140, 000);
	glBegin(GL_POLYGON);
		//glVertex2i(45, 100);
		glVertex2i(55,130);
		glVertex2i(65,130);
		glVertex2i(70,145);
		glVertex2i(80, 175);
		glVertex2i(83, 165);
		glVertex2i(98, 183);
		glVertex2i(110, 192);
		glVertex2i(120, 200);
		glVertex2i(130, 180);
		glVertex2i(140, 185);
		glVertex2i(150, 175);
		glVertex2i(160, 160);
		glVertex2i(167, 170);
		glVertex2i(175, 150);
		glVertex2i(190, 130);
		//glVertex2i(195, 100);
	glEnd();
}

void createFire3()
{
	glColor3ub(231, 225, 000);
	glBegin(GL_POLYGON);
		//glVertex2i(70, 130);
		//glVertex2i(80, 130);
		glVertex2i(75, 130);
		glVertex2i(80, 145);
		glVertex2i(90, 135);
		glVertex2i(97, 150);
		glVertex2i(105, 165);
		glVertex2i(116, 155);
		glVertex2i(118, 170);
		glVertex2i(122, 180);
		glVertex2i(130, 160);
		glVertex2i(135, 165);
		glVertex2i(140, 155);
		glVertex2i(143, 140);
		glVertex2i(147, 145);
		glVertex2i(157, 130);
		//glVertex2i(161, 130);
		//glVertex2i(165, 130);
	glEnd();
}

	

void moveline(int y1,int y2,int x)
{
	for(int i=y1;(i-2)>y2;i--)
		{
			glColor3f(0.0,1.0,1.0);
			glBegin(GL_LINES);
			glVertex2i(x,i);
			glVertex2i(x,i-3);
			glEnd();
			glFlush();
			for(int j=0;j<5555;j++)
			for(int m=0;m<333;m++);
			glColor3f(1.0,1.0,1.0);
			glBegin(GL_LINES);
			glVertex2i(x,i);
			glVertex2i(x,i-3);
			glEnd();
			glFlush();
	}
}

void flashToRight(int x,int y,int cond)
{
	//glColor3f(1.0,0.0,1.0);
int i=8,x1=x,y1=y;
	while(x<cond)
	{
		glColor3ub(239, 251, 255);
		glBegin(GL_LINES);
		glVertex2i(x,y);
		glVertex2i(x=x+i,y=y+(2*i));
		glEnd();
		glFlush();
		for(int j=0;j<20976;j++)
			for(int k=0;k<5651;k++);
		

		glColor3ub(239, 251, 255);
		glBegin(GL_LINES);
		glVertex2i(x,y);
		glVertex2i(x=x+i,y=y-(2*i));
		glEnd();
		glFlush();
		for(int j=0;j<20976;j++)
			for(int k=0;k<7651;k++);
				
	}
	/*glBegin(GL_LINES);
		glVertex2i(x,y);
		glVertex2i(x=x+i,y=y+i);
		glVertex2i(x,y);
		glVertex2i(x=x-(2*i),y=y+(2*i));
		glEnd();*/
		glFlush();
}


void flashToTop(int x,int y,int cond)
{
	//glColor3f(1.0,0.0,1.0);
int i=8,x1=x,y1=y;
	while(y<cond-5)
	{
		glColor3ub(239, 251, 255);
		glBegin(GL_LINES);
		glVertex2i(x,y);
		glVertex2i(x=x+(2*i),y=y+i);
		glEnd();
		glFlush();
		for(int j=0;j<20976;j++)
			for(int k=0;k<7651;k++);
		

		glColor3ub(239, 251, 255);
		glBegin(GL_LINES);
		glVertex2i(x,y);
		glVertex2i(x=x-(2*i),y=y+i);
		glEnd();
		glFlush();
		for(int j=0;j<20976;j++)
			for(int k=0;k<7651;k++);
				
	}
	/*glBegin(GL_LINES);
		glVertex2i(x,y);
		glVertex2i(x=x+i,y=y+i);
		glVertex2i(x,y);
		glVertex2i(x=x+(2*i),y=y-(2*i));
		glEnd();*/
		glFlush();
}

void flashmove(int x,int y,int cond)
{
	glColor3f(1.0, 0, 0);
}

void movelinebundle(int x1,int x2,int y1,int y2)
{int i,p,z,m;
	//glColor3f(1.0,0.0,1.0);
	for(int f=0;f<3;f++)
  for(p=y1;p>=(y2+2);p=p-2)
  {
	for(i=x1;i<=x2;i=i+2)
	{	glColor3f(0.0,1.0,1.0);
		glBegin(GL_LINES);
		glVertex2i(i,p);
		glVertex2i(i,p-2);
		glEnd();
		glFlush();
	}
	for( z=0;z<6478;z++)
	  for( m=0;m<567;m++);
 // glColor3f(1.0,1.0,1.0);
  for(i=x1;i<=x2;i=i+2)
	{	glColor3f(1.0,1.0,1.0);
		glBegin(GL_LINES);
		glVertex2i(i,p);
		glVertex2i(i,p-2);
		glEnd();
		glFlush();
	}
	for(i=x1+1;i<=x2;i=i+2)
	{	glColor3f(0.0,1.0,1.0);
		glBegin(GL_LINES);
		glVertex2i(i,p);
		glVertex2i(i,p-2);
		glEnd();
		glFlush();
	}for( z=0;z<6478;z++)
	  for( m=0;m<5567;m++);
 // glColor3f(1.0,1.0,1.0);
  for(i=x1+1;i<=x2;i=i+2)
	{	glColor3f(1.0,1.0,1.0);
		glBegin(GL_LINES);
		glVertex2i(i,p);
		glVertex2i(i,p-2);
		glEnd();
		glFlush();
	}
  
  
  
  }
}

	// Functions for Water Flow 

void fillright(float x,float y,float y1,float con){
	for(;x<con;){
		glColor3f(0.0,1.0,1.0);
		glBegin(GL_LINES);
		glVertex2f(x,y);
		glVertex2f(x,y1);
		glEnd();
		x = x+0.5;
	glFlush();
	//for(int k=0;k<500;k++);
	//for(int m=0;m<643;m++);
	}
}

void filldown(float x,float x1,float y,float con)
{   
	for(;y>con;){
		//glColor3f(0.0,1.0,1.0);
		glBegin(GL_LINES);
		glVertex2f(x,y);
		glVertex2f(x1,y);
		glEnd();
		y = y - 0.5;
	glFlush();
	//for(int k=0;k<500;k++);
	//for(int m=0;m<643;m++);
	}
}

void moveright(float x,float y,float y1,float con){
	for(;x<con;){
		glColor3f(0.0,1.0,1.0);
		glBegin(GL_LINES);
		glVertex2f(x,y);
		glVertex2f(x,y1);
		glEnd();
		x = x+0.1;
	glFlush();
	for(int k=0;k<2000;k++)
	for(int m=0;m<643;m++);
	}}
void movedown(float x,float x1,float y,float con)
{   
	for(;y>con;){
		glColor3f(0.0,1.0,1.0);
		glBegin(GL_LINES);
		glVertex2f(x,y);
		glVertex2f(x1,y);
		glEnd();
		y = y-0.5;
	glFlush();
	for(int k=0;k<2000;k++)
	for(int m=0;m<643;m++);
	}
}
void moveleft(float x,float y,float y2,float con){
//int y2=229;
	for(;x>con;){
		glColor3f(0.0,1.0,1.0);
		glBegin(GL_LINES);
		glVertex2f(x,y);
		glVertex2f(x,y2);
		glEnd();
		x = x - 0.1;
	glFlush();
	for(int k=0;k<2000;k++)
	for(int m=0;m<643;m++);
	}
}
void moveup(float x,float x1,float y,float con)
{ 
	
	 //x=241,x1=249,y=161;
	for(float i=0;(y+i)<con;){
		glColor3f(0.0,1.0,1.0);
		glBegin(GL_LINES);
		glVertex2f(x,y+i);
		glVertex2f(x1,y+i);
		glEnd();
		i = i+0.5;
	glFlush();
	for(int k=0;k<2000;k++)
	for(int m=0;m<643;m++);
	}
}

//water spray to turbine
void spraydown()
{
	int z=0, k = 4;

	for(int y=279,y1=231;y>230;){
		glColor3f(0.0,0.0,1.0);
		glBegin(GL_LINES);
		for(int i = y; i > y1; ){
			glVertex2i(315,y);
			glVertex2i(315,y-k);

			glVertex2i(325, y);
			glVertex2i(325, y-k);

			glVertex2i(335, y);
			glVertex2i(335, y-k);

			glVertex2i(345, y);
			glVertex2i(345, y-k);
			i = i-k;
		}
		glEnd();
		y-=8;
		glFlush();
		for(int k=0;k<6555;k++)
		for(int m=0;m<5555;m++);
		//for(int i=1;i<100;i++){
			
		glFlush();
		if(y==230)y=280;
		z++;
		if(y1==230)y1=280;
		if(z==30) 
			break;
		}
}

void spraydown2()
{
	int z=0, k = 3;

	for(int y=210,y1=186;y>185;){
		glColor3f(0.0,0.0,1.0);
		glBegin(GL_LINES);
		for(int i = y; i > y1; ){
			glVertex2i(315,y);
			glVertex2i(315,y-k);

			glVertex2i(325, y);
			glVertex2i(325, y-k);

			glVertex2i(335, y);
			glVertex2i(335, y-k);

			glVertex2i(345, y);
			glVertex2i(345, y-k);
			i = i-k;
		}
		glEnd();
		y-=6;
		glFlush();
		for(int k=0;k<6555;k++)
		for(int m=0;m<5555;m++);
		//for(int i=1;i<100;i++){
			
		glFlush();
		if(y == 185)y=210;
		z++;
		if(y1==185)y1=210;
		if(z==30) 
			break;
		}
}

// End of Water Flow Functions

void waterFlow()
{
	// First Comes The Border
	glColor3f(0, 0, 0);
	
	//big cylinder - 1
	glBegin(GL_LINE_STRIP);
		glVertex2i(230, 130);
		glVertex2i(230, 200);
		glVertex2i(245, 200);
	glEnd();
	//big cylinder - 2
	glBegin(GL_LINE_STRIP);
		glVertex2i(251, 200);
		glVertex2i(266, 200);
		glVertex2i(266, 130);
	glEnd();

	//Now comes the pipes - 1
	glBegin(GL_LINE_STRIP);
		glVertex2i(245, 200);
		glVertex2i(245, 270);
		glVertex2i(195, 270);
		glVertex2i(195, 170);
		glVertex2i(145, 170);
		glVertex2i(145, 270);
		glVertex2i(105, 270);
		glVertex2i(105, 170);
		glVertex2i(55, 170);
		glVertex2i(55, 300);
		glVertex2i(35, 300);
		glVertex2i(35, 325);
		glVertex2i(235, 325);
		glVertex2i(235, 305);
		glVertex2i(336, 305);

		

	glEnd();

	//now comes the pipes - 2
	glBegin(GL_LINE_STRIP);
		glVertex2i(251, 200);
		glVertex2i(251, 280);
		glVertex2i(185, 280);
		glVertex2i(185, 180);
		glVertex2i(155, 180);
		glVertex2i(155, 280);
		glVertex2i(95, 280);
		glVertex2i(95, 180);
		glVertex2i(65, 180);
		glVertex2i(65, 300);
		glVertex2i(75, 300);
		glVertex2i(75, 315);
		glVertex2i(225, 315);
		glVertex2i(225, 295);
		glVertex2i(326, 295);
	glEnd();

	//Now's the tym to fill 
	moveup(230.1, 265.6, 129.9, 199.9);
	moveup(245.1, 250.6, 199.9, 279.9);
	moveleft(245.1, 270.1, 279.9, 185);
	movedown(185.1, 194.9, 270, 169.9);
	moveleft(185.1, 170.1, 179.9, 145);
	moveup(145.1, 154.9, 179.9, 279.9);
	moveleft(145.1, 270.1, 279.9, 95);
	movedown(95.1, 104.9, 270.1, 169.9);
	moveleft(95.1, 170.1, 179.9, 54.9);
	moveup(54.9, 64.9, 180, 300);
	moveup(35.1, 74.9,300, 324.9);
	moveright(75, 315.1, 324.9, 234.9);
	movedown(225.1, 234.9, 315.1, 294.8);
	moveright(225.1, 294.8, 305, 335.8);
	movedown(326.1, 333.8, 294.8, 280);
	
	//hot water shower for turbines
	spraydown();
	

}

void TurbinesAndStuff()
{
	//Collected water
	glColor3ub(173,216,230);
	glBegin(GL_POLYGON);
		glVertex2f(290, 70);
		glVertex2f(290, 190);
		glVertex2f(300, 190);
		glVertex2f(300, 70);
	glEnd();
	glBegin(GL_POLYGON);
		glVertex2f(360, 70);
		glVertex2f(360, 190);
		glVertex2f(370, 190);
		glVertex2f(370, 70);
	glEnd();
	glBegin(GL_POLYGON);
		glVertex2f(290, 160);
		glVertex2f(290, 190);
		glVertex2f(370, 190);
		glVertex2f(370, 160);
	glEnd();

	//Lower part 
	glColor3f(0, 0, 0);

	glBegin(GL_LINE_STRIP);
		glVertex2f(290, 70);
		glVertex2f(290, 190);
		glVertex2f(304, 190);
		glVertex2f(304, 210);
	glEnd();

	glBegin(GL_LINE_STRIP);
		glVertex2f(356, 210);
		glVertex2f(356, 190);
		glVertex2f(370, 190);
		glVertex2f(370, 70);
	glEnd();

	glBegin(GL_LINE_STRIP);
		glVertex2f(300, 70);
		glVertex2f(300, 160);
		glVertex2f(360, 160);
		glVertex2f(360, 70);
	glEnd();

	//the one adjacent to turbine n tank
	glBegin(GL_LINE_STRIP);
		glVertex2f(290, 110);
		glVertex2f(264, 110);
		glVertex2f(250, 128);
		glVertex2f(290, 128);
	glEnd();	
	glColor3ub(197,179,88);
	glBegin(GL_POLYGON);
		glVertex2f(289.5, 110.5);
		glVertex2f(264.5, 110.5);
		//glColor3ub(212,175,55);
		glVertex2f(250.5, 127.5);
		glVertex2f(289.5, 127.5);
	glEnd();

	//inside of lower turbine
	glColor3f(0,0,0);
	glBegin(GL_LINE_STRIP);
		glVertex2f(300, 110);
		glVertex2f(326, 110);
		glVertex2f(326, 118);
		glVertex2f(300, 118);
	glEnd();

	glBegin(GL_LINE_STRIP);
		glVertex2f(300, 100);
		glVertex2f(336, 100);
		glVertex2f(336, 118);
		glVertex2f(360, 118);
	glEnd();

	glColor3ub(238,130,238);
	float x = 300, x1 = 359.6, y = 130, con = 133;
	for(float i=0;(y+i)<con;){
		glBegin(GL_LINES);
			glVertex2f(x,y+i);
			glVertex2f(x1,y+i);
		glEnd();
		i = i+0.5;
	}

	y = 144; con = 147;
	for(float i=0;(y+i)<con;){
		glBegin(GL_LINES);
			glVertex2f(x,y+i);
			glVertex2f(x1,y+i);
		glEnd();
		i = i+0.5;
	}

	//Upper part finally!!
	//left part
	glColor3f(0, 0, 0);
	glBegin(GL_LINE_LOOP);
		glVertex2f(310, 210);
		glVertex2f(310, 230);
		glVertex2f(350, 230);
		glVertex2f(350, 210);
	glEnd();

	glBegin(GL_LINE_STRIP);
		glVertex2f(304, 210);
		glVertex2f(304, 230);
		glVertex2f(296, 230);
		glVertex2f(296, 280);
		glVertex2f(326, 280);
		glVertex2f(326, 295);
	glEnd();

	//left rotating blades
	glBegin(GL_LINE_STRIP);
		glVertex2f(296, 252);
		glVertex2f(302, 252);
		glVertex2f(302, 240);
		glVertex2f(310, 240);
		glVertex2f(324, 252);
		glVertex2f(324, 260);
		glVertex2f(310, 270);
		glVertex2f(302, 270);
		glVertex2f(302, 258);
		glVertex2f(296, 258);
	glEnd();

	

	//right part
	glBegin(GL_LINE_STRIP);
		glVertex2f(356, 210);
		glVertex2f(356, 230);
		glVertex2f(364, 230);
		glVertex2f(364, 280);
		glVertex2f(336, 280);
		glVertex2f(336, 305);
	glEnd();

	//right rotating blades
	glBegin(GL_LINE_STRIP);
		glVertex2f(364, 252);
		glVertex2f(358, 252);
		glVertex2f(358, 240);
		glVertex2f(350, 240);
		glVertex2f(336, 252);
		glVertex2f(336, 260);
		glVertex2f(350, 270);
		glVertex2f(358, 270);
		glVertex2f(358, 258);
		glVertex2f(364, 258);
	glEnd();

	//Generator
	glBegin(GL_LINE_STRIP);
		glVertex2f(364, 258);
		glVertex2f(374, 258);
		glVertex2f(374, 290);
		glVertex2f(400, 290);
	glEnd();
	glBegin(GL_LINE_STRIP);
		glVertex2f(364, 252);
		glVertex2f(374, 252);
		glVertex2f(374, 220);
		glVertex2f(400, 220);
	glEnd();
}

void airfill()
{//int x=226,x1=264,y=101;
	//glColor3f(1.0,1.0,0.0);
	moveup(49,21,260,289);
    moveright(50,281,289,249);
	movedown(241,249,281,251);
	moveright(250,251,259,349);
	movedown(341,349,250,240);

}

void rotateturbine()
{	int z=0;
	glColor3ub(152,251,152);
	DrawEllipse(410, 255, 4, 4, 25);

	for(int y=241,y1=257;y<270,y1<270;y++,y1++){
			glColor3f(0.0,0.0,1.0);
			glBegin(GL_LINES);
		glVertex2i(303,y);
		glVertex2i(309,y);
		glVertex2i(303,y1);
		glVertex2i(309,y1);

		glVertex2i(351,y);
		glVertex2i(357,y);
		glVertex2i(351,y1);
		glVertex2i(357,y1);
		
		glEnd();
		glFlush();
		for(int k=0;k<6555;k++)
		for(int m=0;m<5555;m++);
		//for(int i=1;i<100;i++){
			glColor3f(1.0,1.0,1.0);
			glBegin(GL_LINES);
		glVertex2i(303,y);
		glVertex2i(309,y);
		glVertex2i(303,y1);
		glVertex2i(309,y1);

		glVertex2i(351,y);
		glVertex2i(357,y);
		glVertex2i(351,y1);
		glVertex2i(357,y1);
		
		glEnd();
		glFlush();
		if(y==269)y=241;z++;
		if(y1==269)y1=241;
		if(z==30) 
			break;
		}
}



//Electric Wires For power plant
void electWires()
{
	glColor3ub(255, 255, 255);
	glBegin(GL_LINE_STRIP);
		glVertex2f(420, 256);
		glVertex2f(450, 256);
		glVertex2f(450, 400);
		glVertex2f(500, 400);
	glEnd();
	glBegin(GL_LINE_STRIP);
		glVertex2f(420, 254);
		glVertex2f(452, 254);
		glVertex2f(452, 398);
		glVertex2f(500, 398);
	glEnd();

}



void gradientSky(){
    glClear(GL_COLOR_BUFFER_BIT);

    glBegin(GL_POLYGON);
        glColor3ub(0,191,255);
        glVertex2f(0, 0);

        glVertex2f(0, 500);

        glColor3ub(30,144,255);
        glVertex2f(500,500);

        glVertex2f(500, 0);

    glEnd();
}

void bgSky(int r1, int g1, int b1, int r2, int g2, int b2)
{
	glBegin(GL_POLYGON);
        glColor3ub(r1, g1, b1);
		glVertex2f(0, 500);
		glVertex2f(500,500);

        glColor3ub(r2, g2, b2);
		glVertex2f(500, 0);
		glVertex2f(0, 0);

    glEnd();
}

void polyWindows(float x, float y)
{
	glBegin(GL_POLYGON);
		glVertex2f(x, y);
	glEnd();
}

void polyBuildings(int n, float x[], float y[])
{
	glBegin(GL_POLYGON);
	for(int i = 0; i <= n; i++)
			glVertex2f(x[i], y[i]);
		glEnd();
}

void FWinAlgo(float x, float y, float xs, float ys, int n, float pers)
{
	//glColor3f(1, 0, 0);
	for(int i = 0; i < n; i++)
	{
		if(n != 0)
		{
			glBegin(GL_POLYGON);
				glVertex2f(x, y);
				glVertex2f(x+xs, y-pers);
				glVertex2f(x+xs, y-ys-pers);
				glVertex2f(x, y-ys);
			glEnd();
			n--;
		}
		
		y = y - (ys + ys);
	}
	glFlush();
}

void drawStars(){
glPointSize(2);
for( int i = 0; i < 300; i++ )
{
    glColor3ub(255,255,255);
    // width and height are 1e6.
    int x = rand() % 500; 
    int y = rand() % 500; 
    glBegin( GL_POINTS );
    glVertex2i( x, y );
    glEnd();
}
//glFlush();  
}


void buildings(float alpha)
{
	

	//building1
	float x3[] = {0, 0, 45, 45};
	float y3[] = {63, 420, 390, 60};
	glColor3ub(10,51,8);
	polyBuildings(3, x3, y3);
	glColor4f(1, 1, 1, alpha);
	FWinAlgo(7, 390, 6, 9, 36, 2);
	FWinAlgo(16, 386, 6, 9, 36, 2);
	FWinAlgo(25, 382, 6, 9, 36, 2);
	FWinAlgo(34, 378, 6, 9, 36, 2);

	//buildings2
	float x4[] = {135, 135, 150, 150, 159, 159, 168, 168, 174, 174, 175, 175, 183, 183, 189, 189, 195, 195, 215, 215 };
	float y4[] = {54, 390, 390, 420, 420, 450, 450, 468, 468, 490, 490, 468, 468, 450, 450, 420, 420, 390, 390, 51};
	glColor3ub(36,33,36);
	polyBuildings( 19, x4, y4);
	glColor4f(1, 1, 1, alpha);
	//Top most floor windows
	FWinAlgo(165, 440, 4, 6, 4, 0);
	FWinAlgo(172, 440, 4, 6, 4, 0);
	FWinAlgo(179, 440, 4, 6, 4, 0);
	// just below the top most
	FWinAlgo(156, 414, 4, 6, 4, 0);
	FWinAlgo(163, 414, 4, 6, 4, 0);
	FWinAlgo(170, 414, 4, 6, 4, 0);
	FWinAlgo(177, 414, 4, 6, 4, 0);
	FWinAlgo(184, 414, 4, 6, 4, 0);
	//not so top now 
	FWinAlgo(140, 384, 4, 6, 20, 0);
	FWinAlgo(147, 384, 4, 6, 20, 0);
	FWinAlgo(154, 384, 4, 6, 20, 0);
	FWinAlgo(161, 384, 4, 6, 20, 0);
	FWinAlgo(168, 384, 4, 6, 20, 0);
	FWinAlgo(175, 384, 4, 6, 20, 0);
	FWinAlgo(182, 384, 4, 6, 56, 0);
	FWinAlgo(189, 384, 4, 6, 56, 0);
	FWinAlgo(196, 384, 4, 6, 56, 0);
	FWinAlgo(203, 384, 4, 6, 56, 0);

	//building 7
	float x13[] = {315, 315, 390, 405, 405};
	float y13[] = {42, 330, 465, 465, 39};
	glColor3ub(43,33,21);
	polyBuildings(4, x13, y13);
	//F windows
	glColor4f(1,1,1,alpha);
	FWinAlgo(326, 324, 4, 6, 40, 0);
	FWinAlgo(333, 333, 4, 6, 48, 0);
	FWinAlgo(340, 342, 4, 6, 50, 0);
	FWinAlgo(347, 351, 4, 6, 52, 0);
	FWinAlgo(354, 360, 4, 6, 54, 0);
	FWinAlgo(361, 369, 4, 6, 56, 0);
	FWinAlgo(368, 378, 4, 6, 20, 0);
	FWinAlgo(375, 387, 4, 6, 20, 0);
	FWinAlgo(382, 400, 4, 6, 20, 0);
	FWinAlgo(389, 412, 4, 6, 20, 0);
	FWinAlgo(396, 460, 4, 6, 20, 0);


	//Perfect :*)
	glColor3ub(43,33,44);
	glPushMatrix();
	glRotatef(-60.0f,0.0f,0.0f, -60.0f);
	DrawEllipse(430, 235, 76, 20, 100);
	glPopMatrix();
	

	//building 3
	float x5[] = {210, 210, 240, 240, 300, 300, 270, 270};
	float y5[] = {51, 360, 369, 393, 402, 372, 372, 45};
	glColor3ub(37,53,41);
	polyBuildings(7, x5, y5);
	

	float x6[] = {270, 270, 300, 300, 330, 330}; 
	float y6[] = {45, 372, 372, 402, 390, 42};
	glColor3ub(37,53,32);
	polyBuildings(5, x6, y6);
	
	//again windows, sheesh its tooo much
	glColor4f(1, 1, 1, alpha);
	FWinAlgo(216, 355, 6, 8, 40, -2);
	FWinAlgo(225, 357, 6, 8, 40, -2);
	FWinAlgo(234, 358, 6, 8, 40, -2);
	FWinAlgo(243, 359, 6, 8, 40, -2);
	FWinAlgo(252, 360, 6, 8, 40, -2);
	FWinAlgo(261, 361, 6, 8, 40, -2);
	//top windows
	FWinAlgo(242, 388, 6, 6, 4, -0.7);
	FWinAlgo(251, 389, 6, 6, 4, -0.7);
	FWinAlgo(260, 391, 6, 6, 4, -0.7);
	FWinAlgo(269, 392, 6, 6, 4, -0.7);
	FWinAlgo(278, 393, 6, 6, 4, -0.7);
	FWinAlgo(287, 394, 6, 6, 4, -0.7);

	// side angle
	FWinAlgo(276, 364, 6, 8, 40, 2);
	FWinAlgo(285, 364, 6, 8, 40, 2);
	FWinAlgo(295, 396, 6, 8, 46, 2);
	FWinAlgo(304, 395, 6, 8, 46, 2);
	FWinAlgo(313, 390, 6, 8, 46, 2);
	FWinAlgo(322, 388, 6, 8, 46, 2);

	//building 4
	
	float x7[] = {360, 360, 390, 390, 420, 420, 462, 462, 435, 435, 405, 405};
	float y7[] = {39, 339, 342, 366, 372, 393, 396, 372, 372, 345, 345, 36};
	glColor3ub(18,53,36);
	polyBuildings(11, x7, y7);
	glColor4f(1,1,1, alpha);
	//top1
	FWinAlgo(426, 380, 7, 8, 2, -1);
	FWinAlgo(436, 381, 7, 8, 2, -1);
	FWinAlgo(446, 382, 7, 8, 2, -1);

	//top2
	FWinAlgo(396, 360, 7, 8, 2, -1);
	FWinAlgo(406, 361, 7, 8, 2, -1);
	FWinAlgo(416, 362, 7, 8, 2, -1);

	FWinAlgo(366, 330, 7, 8, 38, -1);
	FWinAlgo(378, 332, 7, 8, 38, -1);
	FWinAlgo(390, 334, 7, 8, 38, -1);

	float x8[] = {405, 405, 435, 435, 462, 462, 495, 495};
	float y8[] = {35, 345, 345, 372, 372, 396, 393, 30};
	glColor3ub(18,53,21);
	polyBuildings(7, x8, y8);
	//Side windows
	glColor4f(1, 1, 1, alpha);
	FWinAlgo(411, 333, 7, 8, 38, 0.7);
	FWinAlgo(421, 333, 7, 8, 38, 0.7);
	FWinAlgo(431, 366, 7, 8, 42, 0.7);
	FWinAlgo(441, 366, 7, 8, 42, 0.7);
	FWinAlgo(451, 366, 7, 8, 42, 0.7);
	FWinAlgo(461, 381, 7, 8, 46, 0.7);
	FWinAlgo(471, 381, 7, 8, 46, 0.7);
	FWinAlgo(481, 381, 7, 8, 46, 0.7);

	// building 5
	float x9[] = {66, 66, 150, 150};
	float y9[] = {58, 351, 360, 54};
	glColor3ub(27,27,27);
	polyBuildings(3, x9, y9);
	//front windows
	glColor4f(1, 1, 1, alpha);
	FWinAlgo(75, 345, 7, 8, 30, -1.1);
	FWinAlgo(85, 346, 7, 8, 30, -1.1);
	FWinAlgo(95, 347, 7, 8, 36, -1.1);
	FWinAlgo(105, 348, 7, 8, 36, -1.1);
	FWinAlgo(115, 349, 7, 8, 36, -1.1);
	FWinAlgo(125, 350, 7, 8, 36, -1.1);
	FWinAlgo(135, 351, 7, 8, 36, -1.1);

	float x10[] = {150, 150, 180, 180};
	float y10[] = {54, 360, 345, 54};
	glColor3ub(27,27,15);
	polyBuildings(3, x10, y10);
	//side windows
	glColor4f(1, 1, 1, alpha);
	FWinAlgo(152, 348, 7, 8, 36, 2);
	FWinAlgo(162, 345, 7, 8, 36, 2);
	FWinAlgo(172, 342, 7, 8, 36, 2);
	
	//building 6
	float x11[] = {28, 28, 60, 60};
	float y11[] = {60, 270, 276, 60};
	glColor3ub(26,17,16);
	polyBuildings(3, x11, y11);
	//Front windows
	glColor4f(1, 1, 1, alpha);
	FWinAlgo(30, 266, 6, 7, 30, -1.5);
	FWinAlgo(40, 268, 6, 7, 30, -1.5);
	FWinAlgo(50, 270, 6, 7, 30, -1.5);

	float x12[] = {60, 60, 93, 93};
	float y12[] = {60, 276, 267, 58};
	glColor3ub(26,17,0);
	polyBuildings(3, x12, y12);
	//side windows
	glColor4f(1, 1, 1, alpha);
	FWinAlgo(63, 270, 6, 7, 30, 1.5);
	FWinAlgo(73, 268, 6, 7, 30, 1.5);
	FWinAlgo(83, 266, 6, 7, 30, 1.5);

	//Road
	float x[] = {0, 0, 500, 500};
	float y[] = {0, 60, 12, 0};
	glColor3ub(75,54,33);
	polyBuildings(3, x, y);

	//side grass
	float x2[] = {0, 0, 500, 500};
	float y2[] = {60, 63, 30, 12};
	glColor3ub(10,51,8);
	polyBuildings(3, x2, y2);
}

//functions for plant layout... under this

void drawBrownBase()
{
		
	glLineWidth(10);
	//left side
	glColor3f(0.36, 0.25, 0.20); //dark brown 
	glBegin(GL_POLYGON);
		glVertex2f(35, 257.5);
		glVertex2f(242.5, 90);
		glVertex2f(242.5, 70);
		glVertex2f(35, 242.5);
	glEnd();

	//right side
	glColor3f(0.35, 0.16, 0.14); //very dark brown
	glBegin(GL_POLYGON);
		glVertex2f(242.5, 90);
		glVertex2f(460, 257.5);
		glVertex2f(460, 242.5);
		glVertex2f(242.5, 70);		
	glEnd();

	//top side
	glBegin(GL_POLYGON);
	
		glVertex2f(250, 337.5);
	glColor3f(0.36, 0.25, 0.20); //dark brown 
		glVertex2f(460, 257.5);		
		glVertex2f(242.5, 90);
	glColor3f(0.35, 0.16, 0.14); //very dark brown
		glVertex2f(35, 257.5);		
	glEnd();
}

void drawGreenBase()
{
	//left part
	glColor3ub(102, 51, 0);
	glBegin(GL_POLYGON);
		glVertex2f(35, 262.5);
		glVertex2f(242.5, 97.5);
		glVertex2f(242.5, 90);
		glVertex2f(35, 257.5);		
	glEnd();

	//right side
	glColor3ub(51, 25, 0);
	glBegin(GL_POLYGON);
		glVertex2f(242.5, 97.5);
		glVertex2f(460, 262.5);
		glVertex2f(460, 257.5);
		glVertex2f(242.5, 90);				
	glEnd();	
	//top part
	glColor3f(0.419608, 0.556863, 0.137255);
	glBegin(GL_POLYGON);
		glVertex2f(35, 262.5);
		glVertex2f(250, 340);
		glVertex2f(460, 262.5);			
		glVertex2f(242.5, 97.5);			
	glEnd();	

}


void createTri(float x, float y, float size)
{
	
	glBegin(GL_TRIANGLES);
		glVertex2f(x, y);
		glVertex2f(x+(size/2), y+(size/1.5));
		glVertex2f(x+size, y);
	glEnd();
}

void drawTrees()
{
	//Tree 1
	glColor3f(0.13, 0.37, 0.31);
	createTri(46, 263, 45);
	createTri(51, 273, 35);
	createTri(56, 283, 25);
	createTri(61, 290, 15);
	createTri(63, 295, 10);

	//Tree 2
	glColor3f(0.184314, 0.309804, 0.184314);
	createTri(58, 250, 30);
	createTri(63, 260, 20);
	createTri(68, 268, 10);

	//Tree 3
	glColor3f(0.184314, 0.309804, 0.184314);
	createTri(390, 275, 30);
	createTri(393, 285, 23);
	createTri(397, 295, 15);

	//Tree 4
	glColor3f(0.13, 0.37, 0.31);
	createTri(410, 270, 20);
	createTri(412, 277, 15);

	//Tree 5
	glColor3f(0.184314, 0.309804, 0.184314);
	createTri(393, 248, 20);

	//Tree 6
	glColor3f(0.258824, 0.435294, 0.258824);
	createTri(380, 242, 25);
	createTri(385, 253, 15);

	//Tree 7
	glColor3f(0.184314, 0.309804, 0.184314);
	createTri(200, 155, 15);
	createTri(202.5, 162, 10);

	//Tree 8
	glColor3f(0.258824, 0.435294, 0.258824);
	createTri(205, 145, 13);
	createTri(207.5, 150, 8);
}

void drawPlantFloor()
{
	glColor3f(0.329412, 0.329412, 0.329412); //Dim gray
	//lifting up
	glLineWidth(5);
	glBegin(GL_LINE_STRIP);
		glVertex2f(92.5, 262.5);
		glVertex2f(250, 322.5);
		glVertex2f(402.5, 262.5);
		glVertex2f(245, 155);
		glVertex2f(92.5, 262.5);
	glEnd();

	//Actual floor	
	glBegin(GL_POLYGON);
	glColor3f(0.80, 0.80, 0.80);  //Vlight grey
		glVertex2f(245, 157.5);
		glVertex2f(92.5, 265);
		glColor3f(0.658824, 0.658824, 0.658824); //light grey
		glVertex2f(250, 325);
		glVertex2f(402.5, 265);
	glEnd();
}

void drawCoolingTowers()
{
	int ii, jj;
	float r =0, g =0, b=0, radius1;
	//Cooling tower 1, right
	glColor3f(0.184314, 0.309804, 0.309804); //Dark Slate Grey
	for(ii = 0 ; ii<10; ii++)
		DrawEllipse(250, 300+ii, 40, 18, 50);
	glColor3ub(128, 128, 128); //Dark Grey
	DrawEllipse(250, 310, 40, 18, 50);
	//Actual tower
	
	//Lot of Complex stuffs
	for(jj=0; jj<90; ){
		glColor3ub(204 - r, 204+-g, 204-b);
		radius1 =35-(float)(jj/3.5);
		DrawEllipse(250, 310+jj,radius1, 14, 50);
		jj+=2;
		r+=0.6; g+=0.6; b+=0.6;
		if(radius1 < 21) jj = 90; //Stops wen it reaches certain radius
	}
	//gotta make curve :(
	for(jj =0; jj<30; jj++){
		glColor3ub(200 - r, 200+-g, 200-b);
		radius1 = 20.5-(float)(jj/6);
		DrawEllipse(250, 360+jj, radius1, 14, 50);
		r+=0.9; g+=0.9; b+=0.9;
	}
	//At the top
	glColor3ub(224, 224, 224);
	DrawEllipse(250, 396, 15, 6, 50);
	glColor3ub(64, 64, 64);
	DrawEllipse(250, 396, 12, 5, 50);
	r = 0; g = 0; b = 0;

	//Cooling tower 2, left
	glColor3f(0.184314, 0.309804, 0.3090); //Dark Slate Grey
	for(ii = 0 ; ii<10; ii++)
		DrawEllipse(186, 275+ii, 40, 18, 50);
	glColor3ub(128, 128, 128); //Dark Grey
	DrawEllipse(186, 285, 40, 18, 50);
	//Lot of Complex stuffs
	for(jj=0; jj<90; ){
		glColor3ub(204 - r, 204+-g, 204-b);
		radius1 =35-(float)(jj/3.5);
		DrawEllipse(186, 285+jj,radius1, 14, 50);
		jj+=2;
		r+=0.6; g+=0.6; b+=0.6;
		if(radius1 < 21) jj = 90; //Stops wen it reaches certain radius
	}
	//gotta make curve :(
	for(jj =0; jj<30; jj++){
		glColor3ub(200 - r, 200+-g, 200-b);
		radius1 = 20.5-(float)(jj/6);
		DrawEllipse(186, 330+jj, radius1, 14, 50);
		r+=0.9; g+=0.9; b+=0.9;
	}
	//At the top
	glColor3ub(224, 224, 224);
	DrawEllipse(186, 367, 15, 6, 50);
	glColor3ub(64, 64, 64);
	DrawEllipse(186, 367, 12, 5, 50);
	r = 0; g = 0; b = 0;
}
//Awesome

void drawOfficeRoom()
{

	//left side 1
	glColor3ub(100, 100, 100);
	glBegin(GL_POLYGON);
		glVertex2f(202.5, 255);
		glVertex2f(202.5, 282.5);
		glVertex2f(265, 250);
		glVertex2f(265, 222.5);
	glEnd();
	//goes right 2
	glColor3ub(80, 80, 80);
	glBegin(GL_POLYGON);	
		glVertex2f(265, 222.5);	
		glVertex2f(265, 250);
		glVertex2f(300, 267.5);
		glVertex2f(300, 239);
	glEnd();
	// another right 3
	glColor3ub(100, 100, 100);
	glBegin(GL_POLYGON);
		glVertex2f(300, 239);
		glVertex2f(300, 267.5);		
		glVertex2f(332.5, 252.5);
		glVertex2f(332.5, 225);		
	glEnd();

	//Not so last behind right 5
	glColor3ub(80, 80, 80);
	glBegin(GL_POLYGON);	
		glVertex2f(347.5, 270);
		glVertex2f(347.5, 292.5);
		glVertex2f(362.5, 302.5);
		glVertex2f(362.5, 277.5);
	glEnd();

	//Last right 4
	glColor3ub(80, 80, 80);
	glBegin(GL_POLYGON);	
		glVertex2f(332.5, 225);
		glVertex2f(332.5, 252.5);
		glVertex2f(377.5, 277.5);
		glVertex2f(377.5, 255);
	glEnd();
	//Finally the roof behind
	glColor3ub(105, 105, 105);
	glBegin(GL_POLYGON);	
		glVertex2f(202.5, 282.5); //1
		glVertex2f(302.5, 325);//2
		glVertex2f(362.5, 302.5);//3
		glVertex2f(347.5, 292.5);//4
		glVertex2f(300, 267.5);//7
		glVertex2f(265, 250);//8
	glEnd();
	//roof front
	glBegin(GL_POLYGON);
		glVertex2f(347.5, 292.5);//4
		glVertex2f(377.5, 277.5);//5
		glVertex2f(332.5, 252.5);//6
		glVertex2f(300, 267.5);//7
	glEnd();

	//roof's floor..
	//gotta lift up na
	glLineWidth(5);
	glColor3ub(150, 150, 150);
	glBegin(GL_LINE_STRIP);
		glVertex2f(210, 282.5);//1
		glVertex2f(300, 320);//2
		glVertex2f(352.5, 301);//3
		glVertex2f(337.5, 292.5);//4
		glVertex2f(367.5, 277.5); //5
		glVertex2f(332.5, 257.5); //6
		glVertex2f(300, 272.5); //7
		glVertex2f(265, 255); //8
		glVertex2f(210, 282.5);//1
	glEnd();

	glColor3ub(200, 200, 200);
	glBegin(GL_POLYGON);
		glVertex2f(210, 282.5);//1
		glVertex2f(300, 320);//2
		glVertex2f(352.5, 301);//3
		glVertex2f(337.5, 292.5);//4
		glVertex2f(300, 272.5); //7
		glVertex2f(265, 255); //8
	glEnd();
	glBegin(GL_POLYGON);
		glVertex2f(337.5, 292.5);//4
		glVertex2f(367.5, 277.5); //5
		glVertex2f(332.5, 257.5); //6
		glVertex2f(300, 272.5); //7
	glEnd();

}

void drawMisc()
{
	//some solar panels on roof
	
	glColor3ub(50, 50, 50);
	glLineWidth(4);
	//p1
	glBegin(GL_LINES);
		glVertex2f(237.5, 282.5);
		glVertex2f(247.5, 287.5);
	glEnd();
	//p2
	glBegin(GL_LINES);
		glVertex2f(267.5, 265);
		glVertex2f(282.5, 272.5);
	glEnd();
	//p3
	glBegin(GL_LINES);
		glVertex2f(337.5, 267.5);		
		glVertex2f(347.5, 272.5);		
	glEnd();
	//p4
	glBegin(GL_LINES);
		glVertex2f(330, 295);
		glVertex2f(340, 300);
	glEnd();

	
	//Panel 1
	glBegin(GL_POLYGON);
	glColor3ub(0, 128, 255);
		glVertex2f(227.5, 285);
		glVertex2f(240, 291);
	glColor3ub(102, 178, 255);
		glVertex2f(247.5, 287.5);
		glVertex2f(237.5, 282.5);
	glEnd();

	//Panel 2
	glBegin(GL_POLYGON);
	glColor3ub(0, 128, 255);
		glVertex2f(260, 267.5);
		glVertex2f(275, 275);
	glColor3ub(102, 178, 255);
		glVertex2f(282.5, 272.5);
		glVertex2f(267.5, 265);
	glEnd();

	//Panel 3
	glBegin(GL_POLYGON);
	glColor3ub(0, 128, 255);
		glVertex2f(327.5, 270);
		glVertex2f(337.5, 275);
	glColor3ub(102, 178, 255);
		glVertex2f(347.5, 272.5);
		glVertex2f(337.5, 267.5);
	glEnd();

	//Panel 4
	glBegin(GL_POLYGON);
	glColor3ub(0, 128, 255);
		glVertex2f(322.5, 297.5);
		glVertex2f(331, 302.5);
	glColor3ub(102, 178, 255);
		glVertex2f(340, 300);
		glVertex2f(330, 295);
	glEnd();

	//Overhead Tanks
	float ii;
	//Tank 1.1
	glColor3ub(140, 140, 140);
	for(ii=0; ii<5; ii++)
		DrawEllipse(255, 267.5+ii, 3, 2, 50);
	glColor3ub(180, 180, 180);
	DrawEllipse(255, 272.5, 3, 2, 50);
	//tank 1.2
	glColor3ub(120, 120, 120);
	for(ii=0; ii<5; ii++)
		DrawEllipse(260, 263+ii, 3, 2, 50);
	glColor3ub(160, 160, 160);
	DrawEllipse(260, 263+ii, 3, 2, 50);

	//Tank 2.1
	glColor3ub(140, 140, 140);
	for(ii=0; ii<5; ii++)
		DrawEllipse(307.5, 275+ii, 3, 2, 50);
	glColor3ub(180, 180, 180);
	DrawEllipse(307.5, 275+ii, 3, 2, 50);
	//tank 2.2
	glColor3ub(120, 120, 120);
	for(ii=0; ii<5; ii++)
		DrawEllipse(312, 273+ii, 3, 2, 50);
	glColor3ub(160, 160, 160);
	DrawEllipse(312, 273+ii, 3, 2, 50);

	//Tank 3.1
	glColor3ub(140, 140, 140);
	for(ii=0; ii<5; ii++)
		DrawEllipse(352.5, 277.5+ii, 3, 2, 50);
	glColor3ub(180, 180, 180);
	DrawEllipse(352.5, 277.5+ii, 3, 2, 50);
	//tank 3.2
	glColor3ub(120, 120, 120);
	for(ii=0; ii<5; ii++)
		DrawEllipse(357, 275+ii, 3, 2, 50);
	glColor3ub(160, 160, 160);
	DrawEllipse(357, 275+ii, 3, 2, 50);

	//some windows
	//Left side
	glColor3ub(0, 128, 255);
	FWinAlgo(237.5, 260, 5, 7.5, 2, 2.5);
	FWinAlgo(244, 256, 5, 7.5, 2, 2.5);
	FWinAlgo(251.5, 252, 5, 7.5, 2, 2.5);
	FWinAlgo(258.5, 248, 5, 7.5, 2, 2.5);

	//Right side
	FWinAlgo(302.5, 262.5, 4, 3, 8, 2);
	FWinAlgo(322.5, 252.5, 4, 3, 8, 2);
}

void drawContainers()
{
	float ii;

	//Container 1
	for(ii = 0; ii<20; ii++){
		glColor3ub(125-ii*1.5, 125-ii*1.5, 125-ii*1.5);
		DrawEllipse( 175, 237.5+ii, 27, 11, 50);
	}
	glColor3ub(150, 150, 150);
	DrawEllipse( 175, 257.5, 27, 11, 50);
	glColor3ub(200, 200, 200);
	DrawEllipse( 175, 257.5, 25, 9, 50);

	//container 2
	for(ii = 0; ii<20; ii++){
		glColor3ub(125-ii*1.5, 125-ii*1.5, 125-ii*1.5);
		DrawEllipse( 207.5, 212.5+ii, 27, 11, 50);
	}
	glColor3ub(150, 150, 150);
	DrawEllipse( 207, 232.5, 27, 11, 50);
	glColor3ub(200, 200, 200);
	DrawEllipse( 207, 232.5, 25, 9, 50);

	//container 3
	for(ii = 0; ii<20; ii++){
		glColor3ub(125-ii*1.5, 125-ii*1.5, 125-ii*1.5);
		DrawEllipse( 242.5, 192.5+ii, 27, 11, 50);
	}
	glColor3ub(150, 150, 150);
	DrawEllipse( 242.5, 212.5, 27, 11, 50);
	glColor3ub(200, 200, 200);
	DrawEllipse( 242.5, 212.5, 25, 9, 50);


}

// this might be good...  And it is
void plantLayout()
{
	//Clearing the buffer..

	//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	//Dark background..
	glColor3f(0, 0, 0);
	glBegin(GL_POLYGON);
		glVertex2f(0, 0);
		glVertex2f(0, 500);
		glVertex2f(500, 500);
		glVertex2f(500, 0);
	glEnd();
	drawStars();

	drawBrownBase();
	delay(500);
	glFlush();
	drawGreenBase();
	delay(500);
	glFlush();
	drawPlantFloor();
	
	drawTrees();
	delay(700);
	glFlush();

	drawCoolingTowers();
	delay(700);
	glFlush();
	
	drawOfficeRoom();
	delay(700);
	glFlush();
	
	drawContainers();
	delay(700);
	glFlush();
	
	drawMisc();
	glFlush();
	
	glLineWidth(1);
	delay(1500);

	glFlush();
	//glutPostRedisplay();
	
}


void sceneElectricity()
{
	float alpha1 = 0.0;
	
	//Check for size of window
	chckWin();

	//code for 500X500 size
	if(wid <= 500 && hei <= 500)
	{
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		glClearColor(0.05, 0.05, 0.05, 1.0);		glClear(GL_COLOR_BUFFER_BIT);

			glPushMatrix();
		//background
		bgSky(25,25,112, 75,0,130);
		drawStars();
		glPopMatrix();
				
			//maybe this works to chng size
		while(alpha1<1){
			glColor4f(1, 1, 0, alpha1);
		drawBitmapText("ELECTRICITY", 170, 400, 0);
		alpha1+=0.02;
		delay(200);
		glFlush();
		}
		alpha1 = 0.0;
		
	
		glColor3f(1, 1, 1);
		drawBitmapText("Lights our Cities", 165, 300, 0);
		delay(500);
		glFlush();
		drawBitmapText("Helped us communicate across", 100, 250,0);
		drawBitmapText("the seas and through the air", 100, 200, 0);
		delay(500);
		glFlush();
		drawBitmapText("Created our Modern Industries", 100, 150, 0);
		delay(500);
		glFlush();
		drawBitmapText("Gave us the Digital Revolution", 100, 100, 0);
		delay(500);
		glFlush();
		
		delay(2000);

	
		glClearColor(0.05, 0.05, 0.05, 1.0);
		glClear(GL_COLOR_BUFFER_BIT);			glPushMatrix();
		//background
		bgSky(25,25,112, 75,0,130);
		drawStars();
		glPopMatrix();

		while(alpha1<1){
			glColor4f(1, 1, 0, alpha1);
		drawBitmapText("So, Where do we get our Electricity from ??", 40, 400, 0);
		alpha1+=0.02;
		delay(200);
		glFlush();
		}
		alpha1 = 0.0;

		glColor3f(1, 1, 1);
		drawBitmapText("There are many ways,", 130, 300, 0);
		delay(500);
		glFlush();
		drawBitmapText("And among them is", 135, 250, 0);
		delay(500);
		glFlush();
		drawBitmapText("Thermal Power Plant", 130, 200, 0);
		delay(500);
		glFlush();
		while(alpha1<1){
			glColor4f(1, 1, 0, alpha1);
		drawBitmapText("This project will show you the layout and", 50, 150, 0);
		drawBitmapText("working model using CGI",110, 100, 0);
		alpha1+=0.02;
		delay(200);
		glFlush();
		}
		alpha1 = 0.0;
	
		delay(1000);
		glFlush();
	}//If true part ends here
	else if(wid > 500 && hei > 500)
	{
		
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		glClearColor(0.05, 0.05, 0.05, 1.0);		glClear(GL_COLOR_BUFFER_BIT);		glPushMatrix();
	//background
	bgSky(25,25,112, 75,0,130);
	drawStars();
	glPopMatrix();
				
		//maybe this works to chng size
	while(alpha1<1){
		glColor4f(1, 1, 0, alpha1);
	drawBitmapText("ELECTRICITY", 200, 400, 0);
	alpha1+=0.02;
	delay(200);
	glFlush();
	}
	alpha1 = 0.0;

	
	glColor3f(1, 1, 1);
	drawBitmapText("Lights our Cities", 200, 300, 0);
	delay(500);
	glFlush();
	drawBitmapText("Helped us communicate across the seas and through the air", 125, 250,0);
	delay(500);
	glFlush();
	drawBitmapText("Created our Modern Industries", 175, 200, 0);
	delay(500);
	glFlush();
	drawBitmapText("Gave us the Digital Revolution", 175, 150, 0);
	delay(500);
	glFlush();
	delay(2000);

	
	glClearColor(0.05, 0.05, 0.05, 1.0);
	glClear(GL_COLOR_BUFFER_BIT);		glPushMatrix();
	//background
	bgSky(25,25,112, 75,0,130);
	drawStars();
	glPopMatrix();

	while(alpha1<1){
		glColor4f(1, 1, 0, alpha1);
	drawBitmapText("So, Where do we get our Electricity from ??", 150, 400, 0);
	alpha1+=0.02;
	delay(200);
	glFlush();
	}
	alpha1 = 0.0;

	glColor3f(1, 1, 1);
	drawBitmapText("There are many ways,", 190, 300, 0);
	delay(500);
	glFlush();
	drawBitmapText("And among them is", 193, 250, 0);
	delay(500);
	glFlush();
	drawBitmapText("Thermal Power Plant", 190, 200, 0);
	delay(500);
	glFlush();
	while(alpha1<1){
		glColor4f(1, 1, 0, alpha1);
	drawBitmapText("This project will show you the layout and working model using CGI", 120, 150, 0);
	alpha1+=0.02;
	delay(200);
	glFlush();
	}
	alpha1 = 0.0;
	
	delay(1000);
	glFlush();
	}//Else part of if Ends here

	delay(500);

	//display1();

	glutPostRedisplay();

}



void electroCity()
{
	

	glClear(GL_COLOR_BUFFER_BIT);
	
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();

	//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
	
	//Background sky
	bgSky(25,25,112, 75,0,130);
	drawStars();



	//Buildings with Fwindows
	for(float i = 0.0; i <= 0.9; ){

	buildings(i);
	for(int d1 = 0; d1 < 10000; d1++)
		for(int d2 = 0; d2 < 1000; d2++) ;
	i+=0.04;
	glFlush();
	}
	

	delay(2000);
	//go to scene 2
	//sceneElectricity();
	
	//display1();

	//glutPostRedisplay();

}
    
void display1(void)
{
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	
	//Sky
	gradientSky();

	// Gradient green lawn
	glBegin(GL_POLYGON);
        glColor3ub(50,205,50);
        glVertex2f(0, 0);

        glVertex2f(0, 150);

        glColor3ub(124,252,0);
        glVertex2f(500,150);

        glVertex2f(500, 0);

    glEnd();

	//here comes the plant
	glBegin(GL_POLYGON); 
		glColor3ub(240,255,240); 
		glVertex2f(30, 70);
		glColor3ub(250,240,230);
		glVertex2f(30, 380);
		glColor3ub(245,245,245);
		glVertex2f(400, 380);
		glVertex2f(400, 290);
		glVertex2f(420, 256);
		glVertex2f(420, 254);
		glVertex2f(400, 220);
		glColor3ub(253,245,230);
		glVertex2f(400, 70);
	glEnd();

	//motor coloring
	float n[] ={374.2, 374.2, 399.8, 419.8, 419.8, 400};
	float m[] ={220.2, 289.8, 289.8, 255.8, 253.8, 220.2};
	glColor3ub(58,94,202);
	polyBuildings(5, n, m);

	glColor3ub(19, 31, 67);
	DrawEllipse(388, 280, 15, 2, 25);
	DrawEllipse(388, 264, 15, 2, 25);
	DrawEllipse(388, 248, 15, 2, 25);
	DrawEllipse(388, 232, 15, 2, 25);

	glColor3ub(255,99,71);
	DrawEllipse(410, 255, 4, 4, 25);

	//Plant border
	glColor3ub(0,0, 0);
	glBegin(GL_LINE_LOOP);
		glVertex2f(30, 70);
		glVertex2f(30, 380);
		glVertex2f(400, 380);
		glVertex2f(400, 290);
		glVertex2f(420, 256);
		glVertex2f(420, 254);
		glVertex2f(400, 220);
		glVertex2f(400, 70);
	glEnd();

	//inside the Plant **FLOOR**
	glBegin(GL_POLYGON);
		glColor3ub(212,175,55);
		glVertex2f(30.1, 70.1);
		glColor3ub(207,181,59);
		glVertex2f(30.2, 130);
		glColor3ub(197,179,88);
		glVertex2f(240, 130);
		glVertex2f(260, 100);
		glVertex2f(286, 100);
		glColor3ub(212,175,55);
		glVertex2f(286, 70.1);
	glEnd();

	//inside the Plant **ROOF**
	glBegin(GL_POLYGON);
		glColor3ub(212,175,55);
		glVertex2f(30.1, 379.9);
		glVertex2f(399.9, 379.9);
		glColor3ub(197,179,88);
		glVertex2f(399.9, 330);
		glVertex2f(30, 330);
	glEnd();
	glBegin(GL_POLYGON);
		glVertex2f(399.9, 330);
		glVertex2f(399.9, 310);
		glVertex2f(240, 310);
		glVertex2f(240, 330);
	glEnd();

	//Electric wires
	electWires();
	
	

	//Hot Oven
	glBegin(GL_POLYGON);
		glColor3ub(255, 148, 77);
		glVertex2f(33, 130);
		glColor3ub(255, 148, 77);
		glVertex2f(33, 290);
		glColor3ub(255, 133, 102);
		glVertex2f(220, 290);
		glColor3ub(255, 133, 128);
		glVertex2f(220, 130);
	glEnd();

	//Fire in the Oven
	createfire();
	createFire2();
	createFire3();
	coal();

	//Turbines and Stuffs
	TurbinesAndStuff();

	//WaterFlow and not Water Falls
	waterFlow();

	//time has come to rotate our turbines
	rotateturbine();

	//water to cooling
	spraydown2();

	//Current from motor	
	//electricCurrent(); 

	flashToRight(420, 247, 440);
	flashToTop(442,259,400);
	flashToRight(450, 392, 500);

	delay(1000);
	
	glutPostRedisplay();
}	


void display(void)
{
	glClearColor(1, 1, 1, 1);
	glClear(GL_COLOR_BUFFER_BIT);
	chckWin();
	//Introduction
	title();
	//displayMenus();

	//Scene 1 Electricity
	//electroCity();

	//Scene 2 Electricity Text
	//sceneElectricity();

	//scene 3 workflow
	//display1();

	//scene 4 plant layout
	//plantLayout();

    glFlush();
	glutPostRedisplay();
	 
}




void main()
{
	//glutInit(&argc,argv);
			glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB|GLUT_DEPTH);
			glutInitWindowSize(500,500);
			glutInitWindowPosition(0, 0);
			glutCreateWindow("Thermal Plant");

			//GL BLEND enabled
			glEnable(GL_BLEND);
			glEnable(GL_POINT_SMOOTH);	

			glBlendFunc(GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA);

			////For 3D
			//glEnable(GL_LIGHTING);
			//glEnable(GL_LIGHT0);
			//glShadeModel(GL_SMOOTH);
			//glEnable(GL_DEPTH_TEST);
			//glEnable(GL_NORMALIZE);

			glutReshapeFunc(myReshape);
			glutDisplayFunc(display);
			glutMouseFunc(mouse);
			glutKeyboardFunc(keys);
	
			//just a message
			printf("Works and Looks Best in 500X500 or default window size.....!!\n");
	

			glClearColor(1.0,1.0,1.0,1.0);
			glColor3f(1.0,0.0,1.0);
			myinit();
			glutMainLoop();
}


